// api/communication-chat.js
export default async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  if (req.method === 'OPTIONS') return res.status(200).end();
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const body = req.body || {};
    let { conversationHistory } = body;
    const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

    if (!OPENAI_API_KEY) {
      return res.status(500).json({
        error: 'Saknar OPENAI_API_KEY i Vercel',
        details: 'L√§gg till env-variabeln och deploya om'
      });
    }

    if (!Array.isArray(conversationHistory)) {
      conversationHistory = [];
    }

    const recentHistory = conversationHistory.slice(-10);

    const systemPrompt = `Du √§r kommunikationsassistent f√∂r Karlskoga kommun med vision "V√§lkomnande, kloka och innovativa Karlskoga".

PROCESS:
1) Om du beh√∂ver mer information: Svara med JSON: {"status": "ask", "question": "din fr√•ga h√§r"}
2) N√§r du har tillr√§ckligt med info: Svara med JSON: {"status": "ready", "channels": {...alla kanaler...}}

St√§ll EN kort fr√•ga i taget f√∂r att samla in: budskap, m√•lgrupp, syfte, relevanta detaljer (datum/plats/kontakt) och √∂nskad ton.

TONALITET & STIL:
- Professionell men varm och tillg√§nglig
- Anv√§nd "vi" och "du" f√∂r att skapa n√§rhet
- Aktiva verb och tydliga budskap
- Inkluderande spr√•k som speglar v√•r vision
- Undvik byr√•kratiska uttryck och on√∂diga facktermer

=== EXEMPELTEXTER PER KANAL ===

üì∞ NYHET (Webb/Intran√§t):
Rubrik: "Karlskoga satsar p√• solenergi"
Text: "Vi investerar i solceller p√• alla kommunala fastigheter. Under 2025 installeras solpaneler p√• totalt 15 byggnader, vilket minskar v√•ra utsl√§pp med 200 ton CO2 per √•r.

‚Äì Det h√§r √§r ett viktigt steg f√∂r att n√• v√•ra klimatm√•l och samtidigt minska elkostnaderna, s√§ger Jane Andersson, milj√∂strateg.

Installationen startar i mars och ber√§knas vara klar i november."

üìß E-POST:
Rubrik: "Nya digitala verktyg f√∂r enklare vardag"
Text: "Hej!

Nu lanserar vi nya digitala verktyg som g√∂r det enklare f√∂r dig att jobba smartare. Fr√•n och med m√•ndag kan du boka m√∂ten, rapportera tid och hitta dokument ‚Äì allt p√• ett st√§lle.

Logga in p√• Ledarportalen och uppt√§ck funktionerna. Beh√∂ver du hj√§lp? Kontakta IT-supporten p√• 0586-610 00."

üìò FACEBOOK:
Text: "Nu g√∂r vi Karlskoga gr√∂nare! üå±

Vi installerar solceller p√• 15 kommunala byggnader under 2025. Det inneb√§r 200 ton mindre CO2-utsl√§pp varje √•r ‚Äì och l√§gre elkostnader.

Installationen startar i mars. F√∂lj g√§rna projektet h√§r!"
Hashtags: ["#KarlskogaKommun", "#H√•llbarhet", "#Solenergi"]

üíº LINKEDIN:
Text: "Karlskoga kommun tar strategiska steg mot klimatneutralitet

Under 2025 investerar vi i solcellsinstallationer p√• 15 kommunala fastigheter. Projektet minskar v√•ra CO2-utsl√§pp med 200 ton √•rligen och bidrar till l√•ngsiktig kostnadsbesparing.

Detta √§r en del av v√•r vision om ett v√§lkomnande, klokt och innovativt Karlskoga d√§r h√•llbarhet genomsyrar allt vi g√∂r."
Hashtags: ["#H√•llbarhet", "#Innovation", "#KommunalUtveckling"]

üì∏ INSTAGRAM:
Text: "Solenergi = framtiden ‚òÄÔ∏è

15 byggnader f√•r solceller 2025. Vi skapar ett gr√∂nare Karlskoga ‚Äì tillsammans!"
Hashtags: ["#KarlskogaKommun", "#H√•llbarhet", "#Solenergi", "#Innovation"]

üì¢ PRESSMEDDELANDE:
Rubrik: "Karlskoga kommun investerar i solenergi"
Text: "KARLSKOGA 2025-03-15

Karlskoga kommun p√•b√∂rjar installation av solceller p√• 15 kommunala byggnader. Investeringen minskar CO2-utsl√§ppen med 200 ton per √•r.

‚Äì Det h√§r visar att vi tar klimatansvar samtidigt som vi skapar besparingar, s√§ger Jane Andersson, milj√∂strateg.

Installationen p√•b√∂rjas mars 2025 och slutf√∂rs november samma √•r.

F√∂r mer information:
Jane Andersson, milj√∂strateg
Tel: 0586-610 00
E-post: jane.andersson@karlskoga.se"

=== JSON-FORMAT ===

N√§r status √§r "ask":
{
  "status": "ask",
  "question": "Din fr√•ga h√§r"
}

N√§r status √§r "ready", inkludera ALLA sex kanaler:
{
  "status": "ready",
  "channels": {
    "nyhet": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    },
    "epost": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    },
    "facebook": {
      "text": "...",
      "hashtags": ["#tag1", "#tag2"],
      "charCount": 123
    },
    "linkedin": {
      "text": "...",
      "hashtags": ["#tag1", "#tag2"],
      "charCount": 123
    },
    "instagram": {
      "text": "...",
      "hashtags": ["#tag1", "#tag2"],
      "charCount": 123
    },
    "pressmeddelande": {
      "rubrik": "...",
      "text": "...",
      "charCount": 123
    }
  }
}

VIKTIGT: 
- R√§kna charCount ENDAST p√• text-f√§ltet (inte rubrik)
- Svara ENDAST med ren JSON, inga andra kommentarer
- F√∂lj exemplens ton och struktur`;

    const messages = [
      { role: 'system', content: systemPrompt },
      ...recentHistory.map(m => ({
        role: m.role === 'assistant' ? 'assistant' : 'user',
        content: String(m.content || '')
      }))
    ];

    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 28000);

    // Anv√§nd CHAT COMPLETIONS ist√§llet f√∂r Responses API
    const resp = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: messages,
        response_format: { type: 'json_object' },
        temperature: 0.7,
        max_tokens: 2000
      }),
      signal: controller.signal
    }).catch(e => {
      throw e.name === 'AbortError' ? new Error('Timeout - AI svarade inte i tid') : e;
    });

    clearTimeout(timeout);

    if (!resp.ok) {
      const t = await resp.text();
      return res.status(resp.status).json({ error: 'OpenAI fel', details: t });
    }

    const data = await resp.json();
    const raw = data.choices?.[0]?.message?.content;

    if (!raw) {
      return res.status(500).json({ error: 'Tomt AI-svar' });
    }

    let parsed;
    try {
      parsed = JSON.parse(raw);
    } catch {
      return res.status(500).json({
        error: 'Kunde inte tolka AI-JSON',
        details: String(raw).slice(0, 400)
      });
    }

    function normalizeChannels(channels) {
      if (!channels || typeof channels !== 'object') return null;

      const out = {};
      const ensureArray = (arr) => Array.isArray(arr) ? arr.filter(x => typeof x === 'string') : [];

      const setCount = (obj) => {
        if (!obj) return;
        if (typeof obj.text === 'string') {
          obj.charCount = obj.text.length;
        } else {
          obj.charCount = 0;
        }
      };

      if (channels.nyhet) {
        out.nyhet = {
          rubrik: String(channels.nyhet.rubrik || ''),
          text: String(channels.nyhet.text || ''),
          charCount: 0
        };
        setCount(out.nyhet);
      }
      if (channels.epost) {
        out.epost = {
          rubrik: String(channels.epost.rubrik || ''),
          text: String(channels.epost.text || ''),
          charCount: 0
        };
        setCount(out.epost);
      }
      if (channels.facebook) {
        out.facebook = {
          text: String(channels.facebook.text || ''),
          hashtags: ensureArray(channels.facebook.hashtags),
          charCount: 0
        };
        setCount(out.facebook);
      }
      if (channels.linkedin) {
        out.linkedin = {
          text: String(channels.linkedin.text || ''),
          hashtags: ensureArray(channels.linkedin.hashtags),
          charCount: 0
        };
        setCount(out.linkedin);
      }
      if (channels.instagram) {
        out.instagram = {
          text: String(channels.instagram.text || ''),
          hashtags: ensureArray(channels.instagram.hashtags),
          charCount: 0
        };
        setCount(out.instagram);
      }
      if (channels.pressmeddelande) {
        out.pressmeddelande = {
          rubrik: String(channels.pressmeddelande.rubrik || ''),
          text: String(channels.pressmeddelande.text || ''),
          charCount: 0
        };
        setCount(out.pressmeddelande);
      }

      return out;
    }

    if (parsed.status === 'ask') {
      const question = String(parsed.question || 'Vad √§r huvudsakligt budskap? Vem √§r m√•lgruppen?');
      const assistantHistoryContent = `FR√ÖGA: ${question}`;
      return res.status(200).json({
        message: question,
        fullResponse: assistantHistoryContent,
        generatedContent: null
      });
    }

    if (parsed.status === 'ready') {
      const channels = normalizeChannels(parsed.channels);
      if (!channels || Object.keys(channels).length === 0) {
        return res.status(500).json({
          error: 'Saknar kanalinneh√•ll trots status=ready'
        });
      }
      const friendly = 'Jag har skapat f√∂rslag f√∂r respektive kanal i rutan till h√∂ger. Vill du justera n√•got?';
      const assistantHistoryContent = 'KLAR: genererade kanaltexter';
      return res.status(200).json({
        message: friendly,
        fullResponse: assistantHistoryContent,
        generatedContent: { channels }
      });
    }

    return res.status(500).json({
      error: 'Ov√§ntad status i AI-svar',
      details: parsed
    });

  } catch (err) {
    return res.status(500).json({
      error: 'N√•got gick fel',
      details: err.message,
      timestamp: new Date().toISOString()
    });
  }
}

export const config = { maxDuration: 30 };
